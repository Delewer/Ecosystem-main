# Generated by Django 4.2 on 2025-09-25 04:35

from django.db import migrations


def enrich_lessons(apps, schema_editor):
    Lesson = apps.get_model("estudy", "Lesson")
    LessonResource = apps.get_model("estudy", "LessonResource")
    LessonPractice = apps.get_model("estudy", "LessonPractice")

    updates = {
        "nivel-1-prieteni-cu-variabilele": {
            "excerpt": "Descoperă cum variabilele transformă ideile în programe vii și prietenoase.",
            "theory_intro": "Variabilele sunt cutii imaginare pe care le poți umple cu informație. Dacă le denumești clar, programele tale devin mai ușor de înțeles.",
            "theory_takeaways": [
                "O variabilă primește un nume și păstrează o valoare.",
                "Poți rescrie cutia oricând folosind operatorul `=`.",
                "Cu variabile creezi mesaje dinamice, scoruri și povești digitale.",
                "Tipul valorii (număr, text, listă) dictează ce poți face cu ea.",
            ],
            "content": (
                "Imaginează-ți că ești curatorul unui muzeu digital. Fiecare exponat trebuie păstrat într-o cutie cu etichetă,"
                " iar prietenii tăi pot vizita muzeul pentru a vedea conținutul. Aceasta este rolul unei variabile."
                "\n\n"
                "1. **Creăm cutia** — scriem `nume_exponat = 'Brățară fosforescentă'`. Python creează o cutie invizibilă"
                " și notează pe etichetă `nume_exponat`. Înăuntru găsești textul 'Brățară fosforescentă'."
                "\n\n"
                "2. **Folosim conținutul** — cu `print(nume_exponat)` afișăm mesajul exact când avem nevoie de el."
                " Dacă schimbăm valoarea în `'Colier digital'`, toate mesajele devin instant actualizate."
                "\n\n"
                "3. **Actualizăm scoruri** — în jocuri variabilele ne ajută să reținem punctajul, viețile și nivelurile."
                " Instrucțiunea `scor = scor + bonus` înseamnă «ia scorul vechi și adaugă bonus»."
                "\n\n"
                "4. **Tipuri de variabile** — numerele suportă operații matematice, șirurile de caractere construiesc mesaje,"
                " iar listele stochează colecții, precum inventarul unui erou. Cu un nume inspirat, cutia devine ușor de folosit de întreaga echipă."
            ),
            "resources": [
                {
                    "title": "Code.org · Introducere în variabile",
                    "url": "https://studio.code.org/s/express-2023/lessons/10/levels/1",
                    "resource_type": "interactive",
                },
                {
                    "title": "Scratch · Joacă-te cu mesaje personalizate",
                    "url": "https://scratch.mit.edu/projects/editor/",
                    "resource_type": "interactive",
                },
                {
                    "title": "RealPython · Variabile în Python",
                    "url": "https://realpython.com/python-variables/",
                    "resource_type": "article",
                },
            ],
            "practice": {
                "intro": "Robo are nevoie să recapitulăm ce înseamnă fiecare piesă a unei variabile.",
                "instructions": "Trage piesele corecte spre explicația potrivită pentru a-l ajuta pe Robo să repare consola.",
                "success_message": "Excelent! Robo și-a reamintit totul despre variabile.",
                "draggables": [
                    {"id": "naming", "label": "nume_jucator"},
                    {"id": "value", "label": "'Mara'"},
                    {"id": "update", "label": "scor = scor + bonus"},
                    {"id": "display", "label": "print(mesaj)"},
                ],
                "targets": [
                    {"prompt": "Numele variabilei care păstrează un text.", "accepts": "naming"},
                    {"prompt": "Exemplu de valoare pentru o variabilă de tip string.", "accepts": "value"},
                    {"prompt": "Instrucțiune ce mărește valoarea existentă.", "accepts": "update"},
                    {"prompt": "Comandă ce afișează conținutul cutiei.", "accepts": "display"},
                ],
            },
        },
        "nivel-2-aventuri-cu-buclele": {
            "excerpt": "Antrenează un robot dansator să repete mișcări corecte folosind bucle for și while.",
            "theory_intro": "Buclele sunt refrenul programării. Ele repetă pași fericiți fără să obosești tastatura.",
            "theory_takeaways": [
                "`for` parcurge o secvență sau o listă de valori numerotate.",
                "`while` se repetă cât timp condiția rămâne adevărată.",
                "Este important să actualizăm variabilele din interiorul buclei pentru a evita ciclurile infinite.",
                "`break` și `continue` ajustează ritmul repetițiilor.",
            ],
            "content": (
                "Când construiești aventuri digitale, buclele sunt ritmul care ține totul sincronizat."
                " Începe cu o listă de sarcini pentru robot și transform-o într-o buclă `for` care parcurge fiecare pas."
                "\n\n"
                "Buclele `for` iubesc colectiile. `for misiune in misiuni:` efectuează fiecare provocare pe rând,"
                " iar tu te poți concentra pe poveste. Atunci când nu știi câți pași vei avea, `while` îți oferă flexibilitate."
                "\n\n"
                "Creează o variabilă de control — de exemplu `energie = 10`. În buclă, scade energia: `energie -= 1`."
                " Când energia ajunge la zero, condiția `energie > 0` devine falsă și robotul se oprește în siguranță."
                "\n\n"
                "Nu uita de butoanele speciale: `break` te scoate din buclă imediat, iar `continue` sare peste pasul curent,"
                " păstrând ritmul. Cu aceste instrumente poți orchestra dansuri, jocuri și efecte vizuale repetitive cu efort minim."
            ),
            "resources": [
                {
                    "title": "Khan Academy · Intro în bucle",
                    "url": "https://www.khanacademy.org/computing/computer-programming/programming/loops",
                    "resource_type": "article",
                },
                {
                    "title": "Programiz · Bucla for în Python",
                    "url": "https://www.programiz.com/python-programming/for-loop",
                    "resource_type": "article",
                },
                {
                    "title": "Code.org · Frozen: coregrafie cu bucle",
                    "url": "https://studio.code.org/projects/frozen/stage/1/level/1",
                    "resource_type": "interactive",
                },
            ],
            "practice": {
                "intro": "Loopster, robotul dansator, are nevoie de coregrafia corectă pentru fiecare tip de buclă.",
                "instructions": "Potrivește fiecare cartonaș cu descrierea potrivită. Folosește logica pentru a nu obosi robotul.",
                "success_message": "Perfect! Loopster dansează impecabil datorită ție.",
                "draggables": [
                    {"id": "forloop", "label": "for pas in range(4)"},
                    {"id": "whileloop", "label": "while energie > 0"},
                    {"id": "break", "label": "break"},
                    {"id": "continue", "label": "continue"},
                ],
                "targets": [
                    {"prompt": "Repetă un număr fix de mișcări.", "accepts": "forloop"},
                    {"prompt": "Continuă cât timp robotul mai are energie.", "accepts": "whileloop"},
                    {"prompt": "Oprește bucla imediat.", "accepts": "break"},
                    {"prompt": "Sari peste pasul curent și treci la următorul.", "accepts": "continue"},
                ],
            },
        },
        "nivel-3-super-puteri-cu-functii": {
            "excerpt": "Împachetează logica în funcții reutilizabile și învață cum să transmiți și să primești valori cu stil.",
            "theory_intro": "Funcțiile sunt super-puteri pe care le poți chema oricând. Cu parametri și `return`, fiecare super erou devine personalizat.",
            "theory_takeaways": [
                "Funcțiile organizează codul și îl fac reutilizabil.",
                "Parametrii primesc valori noi la fiecare apel.",
                "`return` trimite rezultatul din interiorul funcției.",
                "Docstring-urile explică ce face funcția pentru colegii tăi.",
            ],
            "content": (
                "Gândește-te la funcții ca la cele mai bune trucuri din echipa ta digitală."
                " Începi cu `def salut(nume):` și scrii pașii magici în interior. Parametrul `nume` este locul unde păstrezi"
                " ingredientul secret. Când chemi funcția, ingredientul se schimbă în funcție de invitații tăi."
                "\n\n"
                "Prin `return` alegi ce rezultat vrei să trimiți înapoi. Poți returna un număr, un text sau chiar un dicționar"
                " cu statistici pentru colegii din echipă. Fără `return`, funcția rulează, dar se păstrează tăcută."
                "\n\n"
                "Scrie docstring-uri scurte pentru a explica în câteva cuvinte ce face super-puterea ta:"
                " `""Calculează bonusul în funcție de multiplu.""`. Când ai nevoie de aceeași logică în alt joc,"
                " nu trebuie decât să inviți funcția la petrecere."
            ),
            "resources": [
                {
                    "title": "RealPython · Definirea funcțiilor",
                    "url": "https://realpython.com/defining-your-own-python-function/",
                    "resource_type": "article",
                },
                {
                    "title": "Documentația oficială Python",
                    "url": "https://docs.python.org/3/tutorial/controlflow.html#defining-functions",
                    "resource_type": "article",
                },
                {
                    "title": "Codecademy · Practică funcții",
                    "url": "https://www.codecademy.com/resources/docs/python/functions",
                    "resource_type": "interactive",
                },
            ],
            "practice": {
                "intro": "Echipa ta are nevoie de o bibliotecă de super-puteri. Sortează fiecare piesă la locul ei.",
                "instructions": "Trage elementele spre definiția corectă pentru a finaliza laboratorul funcțiilor.",
                "success_message": "Fantastic! Biblioteca de funcții este gata de lansare.",
                "draggables": [
                    {"id": "define", "label": "def calculeaza_bonus(...)"},
                    {"id": "param", "label": "multiplu"},
                    {"id": "return", "label": "return rezultat"},
                    {"id": "call", "label": "print(calculeaza_bonus(50, 2))"},
                ],
                "targets": [
                    {"prompt": "Linia unde definim funcția.", "accepts": "define"},
                    {"prompt": "Variabila locală care primește valoarea trimisă.", "accepts": "param"},
                    {"prompt": "Instrucțiunea care trimite rezultatul înapoi.", "accepts": "return"},
                    {"prompt": "Exemplu de apel cu afișarea rezultatului.", "accepts": "call"},
                ],
            },
        },
    }

    for slug, data in updates.items():
        try:
            lesson = Lesson.objects.get(slug=slug)
        except Lesson.DoesNotExist:
            continue

        for field in ("excerpt", "theory_intro", "content"):
            value = data.get(field)
            if value is not None:
                setattr(lesson, field, value)

        if "theory_takeaways" in data:
            lesson.theory_takeaways = data["theory_takeaways"]

        lesson.save()

        resources = data.get("resources", [])
        if resources:
            LessonResource.objects.filter(lesson=lesson).delete()
            for index, resource in enumerate(resources):
                LessonResource.objects.create(
                    lesson=lesson,
                    title=resource["title"],
                    url=resource["url"],
                    resource_type=resource.get("resource_type", "article"),
                    order=index,
                )

        practice_data = data.get("practice")
        if practice_data:
            practice, _ = LessonPractice.objects.get_or_create(lesson=lesson)
            practice.data = {
                "draggables": practice_data.get("draggables", []),
                "targets": practice_data.get("targets", []),
            }
            practice.intro = practice_data.get(
                "intro",
                getattr(practice, "intro", "Exersează prin potrivirea conceptelor corecte."),
            )
            practice.instructions = practice_data.get(
                "instructions",
                "Trage fiecare piesă colorată lângă descrierea potrivită.",
            )
            practice.success_message = practice_data.get(
                "success_message",
                "Grozaav! Ai asociat corect toate elementele.",
            )
            practice.save()


class Migration(migrations.Migration):

    dependencies = [
        ("estudy", "0009_seed_showcase_lessons"),
    ]

    operations = [
        migrations.RunPython(enrich_lessons, migrations.RunPython.noop),
    ]
