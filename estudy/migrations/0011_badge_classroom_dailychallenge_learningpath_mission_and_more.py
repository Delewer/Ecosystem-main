# Generated by Django 4.2 on 2025-09-26 23:16

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import estudy.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('estudy', '0010_enrich_lesson_content'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='fa-star', max_length=40)),
                ('color', models.CharField(default='#2563eb', max_length=20)),
                ('rule', models.CharField(blank=True, choices=[('lessons_completed', 'Lessons completed'), ('quiz_streak', 'Quiz streak'), ('fast_finisher', 'Fast finisher'), ('project_submitted', 'Project submitted'), ('challenge_master', 'Challenge master')], max_length=40)),
                ('threshold', models.PositiveIntegerField(default=0)),
                ('xp_reward', models.PositiveIntegerField(default=50)),
                ('is_secret', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_ms', models.PositiveIntegerField(default=0)),
                ('awarded_points', models.PositiveIntegerField(default=0)),
                ('earned_bonus', models.BooleanField(default=False)),
                ('feedback', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True)),
                ('invite_code', models.CharField(blank=True, max_length=12, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('archived', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_classrooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='DailyChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(unique=True)),
                ('title', models.CharField(max_length=160)),
                ('description', models.TextField()),
                ('points', models.PositiveIntegerField(default=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=180)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('theme', models.CharField(default='rainbow', max_length=40)),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('audience', models.CharField(default='general', max_length=60)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_ms', models.PositiveIntegerField(default=0)),
                ('awarded_points', models.PositiveIntegerField(default=0)),
                ('earned_bonus', models.BooleanField(default=False)),
                ('feedback', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='Mission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(unique=True)),
                ('title', models.CharField(max_length=150)),
                ('description', models.TextField()),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('once', 'One time')], default='daily', max_length=20)),
                ('target_value', models.PositiveIntegerField(default=1)),
                ('reward_points', models.PositiveIntegerField(default=50)),
                ('icon', models.CharField(default='fa-rocket', max_length=40)),
                ('color', models.CharField(default='#6366f1', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('reward_badge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='estudy.badge')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('summary', models.CharField(max_length=250)),
                ('brief', models.TextField()),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('estimated_minutes', models.PositiveIntegerField(default=90)),
                ('points_reward', models.PositiveIntegerField(default=150)),
                ('skills', models.JSONField(blank=True, default=estudy.models.default_empty_list)),
                ('resources', models.JSONField(blank=True, default=estudy.models.default_empty_list)),
                ('rubric', models.JSONField(blank=True, default=estudy.models.default_empty_dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_ms', models.PositiveIntegerField(default=0)),
                ('awarded_points', models.PositiveIntegerField(default=0)),
                ('earned_bonus', models.BooleanField(default=False)),
                ('feedback', models.TextField(blank=True)),
            ],
        ),
        migrations.AddField(
            model_name='lesson',
            name='featured',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lesson',
            name='fun_fact',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='lesson',
            name='hero_emoji',
            field=models.CharField(default='ðŸš€', max_length=10),
        ),
        migrations.AddField(
            model_name='lesson',
            name='hero_theme',
            field=models.CharField(default='sky-fizz', max_length=60),
        ),
        migrations.AddField(
            model_name='lesson',
            name='xp_reward',
            field=models.PositiveIntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)]),
        ),
        migrations.AddField(
            model_name='lessonprogress',
            name='fastest_completion_seconds',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='lessonprogress',
            name='points_earned',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='test',
            name='bonus_time_threshold',
            field=models.PositiveIntegerField(default=20),
        ),
        migrations.AddField(
            model_name='test',
            name='difficulty',
            field=models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20),
        ),
        migrations.AddField(
            model_name='test',
            name='points',
            field=models.PositiveIntegerField(default=100),
        ),
        migrations.AddField(
            model_name='test',
            name='time_limit_seconds',
            field=models.PositiveIntegerField(default=60),
        ),
        migrations.AddField(
            model_name='testattempt',
            name='awarded_points',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='testattempt',
            name='earned_bonus',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='testattempt',
            name='feedback',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='testattempt',
            name='time_taken_ms',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='bio',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='display_name',
            field=models.CharField(blank=True, max_length=120),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='favorite_subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fans', to='estudy.subject'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='last_activity_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='level',
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='mascot_slug',
            field=models.CharField(default='robo-fox', max_length=40),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='notifications_enabled',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='parent_email',
            field=models.EmailField(blank=True, max_length=254),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='streak',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='theme_slug',
            field=models.CharField(default='sunny', max_length=40),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='weekly_goal',
            field=models.PositiveIntegerField(default=3),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='xp',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='status',
            field=models.CharField(choices=[('student', 'Student'), ('professor', 'Profesor'), ('admin', 'Administrator'), ('parent', 'Parinte')], default='student', max_length=20),
        ),
        migrations.CreateModel(
            name='ProjectSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True)),
                ('solution_url', models.URLField(blank=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='projects/')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('needs_work', 'Needs updates')], default='pending', max_length=20)),
                ('feedback', models.TextField(blank=True)),
                ('score', models.PositiveIntegerField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='estudy.project')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_reviews', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-uploaded_at',),
            },
        ),
        migrations.AddField(
            model_name='project',
            name='lesson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='estudy.lesson'),
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_enabled', models.BooleanField(default=False)),
                ('in_app_enabled', models.BooleanField(default=True)),
                ('digest_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('never', 'Never')], default='weekly', max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('message', models.TextField()),
                ('category', models.CharField(choices=[('progress', 'Progress'), ('feedback', 'Feedback'), ('system', 'System'), ('community', 'Community')], default='system', max_length=20)),
                ('link_url', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='LeaderboardSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.CharField(choices=[('week', 'Week'), ('month', 'Month')], default='week', max_length=10)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('data', models.JSONField(blank=True, default=estudy.models.default_empty_list)),
                ('classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='estudy.classroom')),
            ],
            options={
                'ordering': ('-generated_at',),
            },
        ),
        migrations.CreateModel(
            name='ExperienceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField()),
                ('reason', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_ms', models.PositiveIntegerField(default=0)),
                ('awarded_points', models.PositiveIntegerField(default=0)),
                ('earned_bonus', models.BooleanField(default=False)),
                ('feedback', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='xp_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='CommunityThread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('body', models.TextField()),
                ('tags', models.JSONField(blank=True, default=estudy.models.default_empty_list)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='threads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-is_pinned', '-created_at'),
            },
        ),
        migrations.CreateModel(
            name='CommunityReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('body', models.TextField()),
                ('is_flagged', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to=settings.AUTH_USER_MODEL)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='estudy.communitythread')),
            ],
            options={
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='ClassAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True)),
                ('assignment_type', models.CharField(choices=[('lesson', 'Lesson'), ('project', 'Project'), ('custom', 'Custom')], default='lesson', max_length=20)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('points', models.PositiveIntegerField(default=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_ms', models.PositiveIntegerField(default=0)),
                ('awarded_points', models.PositiveIntegerField(default=0)),
                ('earned_bonus', models.BooleanField(default=False)),
                ('feedback', models.TextField(blank=True)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='estudy.classroom')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_assignments', to=settings.AUTH_USER_MODEL)),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='estudy.lesson')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='estudy.project')),
            ],
        ),
        migrations.CreateModel(
            name='AIHintRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('response', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='estudy.lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='UserMission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.PositiveIntegerField(default=0)),
                ('completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_reset', models.DateField(blank=True, null=True)),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='estudy.mission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='missions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'mission')},
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('reason', models.CharField(blank=True, max_length=255)),
                ('source', models.CharField(blank=True, max_length=60)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='estudy.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badge_awards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-awarded_at',),
                'unique_together': {('user', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='ParentChildLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_ms', models.PositiveIntegerField(default=0)),
                ('awarded_points', models.PositiveIntegerField(default=0)),
                ('earned_bonus', models.BooleanField(default=False)),
                ('feedback', models.TextField(blank=True)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_links', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='children_links', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('parent', 'child')},
            },
        ),
        migrations.CreateModel(
            name='LearningRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=255)),
                ('score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('consumed', models.BooleanField(default=False)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='estudy.lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-score', '-created_at'),
                'unique_together': {('user', 'lesson')},
            },
        ),
        migrations.CreateModel(
            name='LearningPathLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=1)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='path_items', to='estudy.lesson')),
                ('path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='estudy.learningpath')),
            ],
            options={
                'ordering': ('order',),
                'unique_together': {('path', 'lesson')},
            },
        ),
        migrations.CreateModel(
            name='ClassroomMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('student', 'Student'), ('assistant', 'Assistant')], default='student', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('points', models.PositiveIntegerField(default=0)),
                ('last_activity_at', models.DateTimeField(blank=True, null=True)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='estudy.classroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classroom_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('classroom', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ChallengeAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('is_successful', models.BooleanField(default=False)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='estudy.dailychallenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('challenge', 'user')},
            },
        ),
        migrations.CreateModel(
            name='AvatarUnlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=60)),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar_unlocks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='AssignmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField(blank=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='assignments/')),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('reviewed', 'Reviewed'), ('returned', 'Returned')], default='submitted', max_length=20)),
                ('feedback', models.TextField(blank=True)),
                ('score', models.PositiveIntegerField(blank=True, null=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='estudy.classassignment')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assignment_reviews', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-submitted_at',),
                'unique_together': {('assignment', 'student')},
            },
        ),
    ]
