# Generated by Django 4.2 on 2025-09-25 04:07

from datetime import timedelta

from django.db import migrations
from django.utils import timezone


def seed_showcase_lessons(apps, schema_editor):
    Subject = apps.get_model("estudy", "Subject")
    Lesson = apps.get_model("estudy", "Lesson")
    LessonResource = apps.get_model("estudy", "LessonResource")
    Test = apps.get_model("estudy", "Test")
    LessonPractice = apps.get_model("estudy", "LessonPractice")

    subject, _ = Subject.objects.get_or_create(
        name="Coding Quest",
        defaults={
            "description": "Un traseu vesel prin conceptele de programare pentru copii curioși și adolescenți.",
        },
    )

    today = timezone.localdate()

    lessons_data = [
        {
            "title": "Nivel 1 · Prieteni cu variabilele",
            "difficulty": "beginner",
            "age_bracket": "8-10",
            "duration": 35,
            "offset": 0,
            "excerpt": "În acest prim nivel învățăm cum o variabilă poate păstra un secret digital.",
            "theory_intro": "Ne întâlnim cu variabilele – cutiuțe magice care memorează valori pentru jocurile și aplicațiile noastre.",
            "theory_takeaways": [
                "O variabilă are un nume care spune ce păstrează.",
                "Semnul '=' este ca o săgeată care pune valoarea în cutiuță.",
                "Putem schimba valoarea ori de câte ori avem nevoie.",
            ],
            "content": (
                "Salut, exploratorule!\n\n"
                "În programare, o variabilă este ca o cutie cu etichetă. Scrii pe etichetă numele cutiei,"
                " iar înăuntru pui o informație: un număr, un cuvânt sau chiar o super putere imaginară.\n\n"
                "Pe parcursul lecției exersăm cum declarăm variabile, cum le oferim o valoare și cum citim"
                " ce se află acolo. La final vei putea construi mesaje personalizate pentru prietenii tăi din clasă!"
            ),
            "resources": [
                {
                    "title": "Mini-joc: Ghicește variabila",
                    "url": "https://games.learning.com/variables",
                    "resource_type": "interactive",
                    "order": 0,
                },
                {
                    "title": "Poster colorat cu reguli de denumire",
                    "url": "https://cdn.unitex.ro/resources/poster-variabile.pdf",
                    "resource_type": "worksheet",
                    "order": 1,
                },
            ],
            "tests": [
                {
                    "question": "Care este scopul unei variabile într-un program?",
                    "correct_answer": "Păstrează o valoare pe care o folosim mai târziu",
                    "wrong_answers": [
                        "Desenează o formă pe ecran",
                        "Trimite automat un e-mail",
                        "Oprește programul dacă apare o eroare",
                    ],
                    "theory_summary": "O variabilă este un container flexibil pentru informații.",
                    "practice_prompt": "Scrie un exemplu de mesaj folosind numele unui prieten stocat într-o variabilă.",
                    "explanation": "Variabilele ne ajută să refolosim informații fără să le scriem de mai multe ori.",
                },
                {
                    "question": "Ce înseamnă instrucțiunea `scor = scor + 5`?",
                    "correct_answer": "Adăugăm 5 la valoarea curentă din `scor`",
                    "wrong_answers": [
                        "Setăm scorul la 5 indiferent de situație",
                        "Ștergem variabila `scor`",
                        "Comparăm două scoruri diferite",
                    ],
                    "theory_summary": "Putem actualiza o variabilă folosind chiar valoarea ei curentă.",
                    "practice_prompt": "Gândește-te la un joc și notează o regulă de scor folosind variabile.",
                    "explanation": "Operatorul '=' rescrie valoarea cu rezultatul expresiei din dreapta lui.",
                },
            ],
            "practice": {
                "intro": "Ajută-l pe Robo să sorteze explicațiile corecte pentru fiecare piesă.",
                "instructions": "Trage piesele colorate lângă definiția potrivită.",
                "success_message": "Extraordinar! Variabilele au devenit cei mai buni prieteni ai tăi.",
                "draggables": [
                    {"id": "variable", "label": "Variabilă"},
                    {"id": "value", "label": "Valoare"},
                    {"id": "name", "label": "Nume"},
                ],
                "targets": [
                    {"prompt": "Cutie imaginară care păstrează informații.", "accepts": "variable"},
                    {"prompt": "Ce punem în cutie, de exemplu 10 sau 'Luna'.", "accepts": "value"},
                    {"prompt": "Eticheta scrisă pe cutie pentru a o recunoaște.", "accepts": "name"},
                ],
            },
        },
        {
            "title": "Nivel 2 · Aventuri cu buclele",
            "difficulty": "intermediate",
            "age_bracket": "11-13",
            "duration": 45,
            "offset": 7,
            "excerpt": "Descoperim cum buclele ne ajută să repetăm instrucțiuni fără să ne obosim degetele.",
            "theory_intro": "Buclele sunt ritmul unui program. Le folosești ca un refren care se repetă exact cât vrei.",
            "theory_takeaways": [
                "Buclele `for` numără pașii pentru noi.",
                "Buclele `while` continuă cât timp condiția este adevărată.",
                "Putem folosi `break` și `continue` pentru a regla ritmul unei bucle.",
            ],
            "content": (
                "Un robot care urcă scări, un personaj care colectează monede și o melodie care bate ritmul –"
                " toate folosesc bucle. Învățăm cum funcționează buclele `for` și `while`,"
                " cum alegem variabila de control și cum oprim o repetiție atunci când am terminat treaba."
            ),
            "resources": [
                {
                    "title": "Animație: Dansul buclelor",
                    "url": "https://video.unitex.ro/loops-dance",
                    "resource_type": "video",
                    "order": 0,
                },
                {
                    "title": "Fișă de lucru · Construiește un refren",
                    "url": "https://cdn.unitex.ro/resources/fisa-bucle.pdf",
                    "resource_type": "worksheet",
                    "order": 1,
                },
            ],
            "tests": [
                {
                    "question": "Ce face bucla `for i in range(5):`?",
                    "correct_answer": "Rulează instrucțiunile din interior de cinci ori",
                    "wrong_answers": [
                        "Rulează instrucțiunile până când utilizatorul apasă Stop",
                        "Rulează instrucțiunile doar o dată",
                        "Pornește un cronometru de cinci secunde",
                    ],
                    "theory_summary": "`range(5)` creează cinci pași numerotați de la 0 la 4.",
                    "practice_prompt": "Ține minte un exemplu real unde ai face ceva de cinci ori și notează-l.",
                    "explanation": "Buclele `for` parcug o secvență de valori oferite de `range`.",
                },
                {
                    "question": "Cum oprim o buclă `while` atunci când nu mai dorim să continue?",
                    "correct_answer": "Actualizăm variabila din condiție sau folosim `break`",
                    "wrong_answers": [
                        "Scriem `stop loop`",
                        "Ștergem cuvântul `while`",
                        "Nu putem opri o buclă `while`",
                    ],
                    "theory_summary": "Condiția unei bucle trebuie să devină falsă la un moment dat.",
                    "practice_prompt": "Descrie o situație în care folosești `break` pentru a ieși dintr-o buclă.",
                    "explanation": "Dacă variabila nu se schimbă, bucla nu se oprește niciodată – de aceea actualizăm starea.",
                },
            ],
            "practice": {
                "intro": "Construiește coreografia robotului Loopster.",
                "instructions": "Potrivește tipul buclei cu descrierea corectă.",
                "success_message": "Corect! Loopster dansează perfect după instrucțiunile tale.",
                "draggables": [
                    {"id": "for", "label": "Buclea FOR"},
                    {"id": "while", "label": "Buclea WHILE"},
                    {"id": "break", "label": "Comanda BREAK"},
                ],
                "targets": [
                    {"prompt": "Se repetă un număr clar de pași.", "accepts": "for"},
                    {"prompt": "Continuă cât timp condiția rămâne adevărată.", "accepts": "while"},
                    {"prompt": "Oprește imediat bucla chiar dacă nu s-au terminat pașii.", "accepts": "break"},
                ],
            },
        },
        {
            "title": "Nivel 3 · Super-puteri cu funcții",
            "difficulty": "advanced",
            "age_bracket": "14-16",
            "duration": 55,
            "offset": 14,
            "excerpt": "Împachetăm logica în funcții pe care le putem chema oricând avem nevoie de ele.",
            "theory_intro": "Funcțiile sunt super-puteri reutilizabile. Le dai un nume și poți invoca magia ori de câte ori dorești.",
            "theory_takeaways": [
                "O funcție primește argumente și poate întoarce un rezultat.",
                "Parametrii sunt variabilele locale ale funcției.",
                "Este bine să păstrăm funcțiile scurte și concentrate pe o singură idee.",
            ],
            "content": (
                "Programatorii adoră funcțiile pentru că reduc codul repetitiv. În această lecție definim funcții,"
                " înțelegem diferența dintre argument și parametru și vedem cum se întorc rezultatele cu `return`."
                " Exersăm și scrierea de docstring-uri prietenoase pentru colegii din echipă."
            ),
            "resources": [
                {
                    "title": "Laborator: Creează-ți biblioteca de funcții",
                    "url": "https://studio.unitex.ro/labs/functions",
                    "resource_type": "interactive",
                    "order": 0,
                },
                {
                    "title": "Checklist pentru funcții clare",
                    "url": "https://cdn.unitex.ro/resources/checklist-functii.pdf",
                    "resource_type": "worksheet",
                    "order": 1,
                },
            ],
            "tests": [
                {
                    "question": "Ce face cuvântul cheie `return` într-o funcție?",
                    "correct_answer": "Trimite rezultatul funcției către locul din care a fost apelată",
                    "wrong_answers": [
                        "Pornește funcția încă o dată",
                        "Șterge variabilele globale",
                        "Afișează un mesaj pe ecran",
                    ],
                    "theory_summary": "`return` este ultimul pas din drumul unei funcții.",
                    "practice_prompt": "Descrie o funcție care calculează media a trei numere și scrie ce ar întoarce.",
                    "explanation": "Fără `return`, funcția rulează dar nu oferă nimic programului care a apelat-o.",
                },
                {
                    "question": "De ce folosim parametri într-o funcție?",
                    "correct_answer": "Pentru a transmite informațiile de care funcția are nevoie",
                    "wrong_answers": [
                        "Pentru a face variabilele permanente",
                        "Pentru a încetini funcția",
                        "Pentru a opri funcția să ruleze",
                    ],
                    "theory_summary": "Parametrii sunt intrările funcției – variabile locale definite la apel.",
                    "practice_prompt": "Gândește-te la o funcție `deseneaza_patrat(latura)` și notează cuvinte pentru parametru și rezultat.",
                    "explanation": "Parametrii primesc valori concrete atunci când funcția este apelată.",
                },
            ],
            "practice": {
                "intro": "Construiește laboratorul de funcții pentru echipa ta.",
                "instructions": "Potrivește fiecare piesă cu rolul ei într-o funcție.",
                "success_message": "Fantastic! Funcțiile tale sunt gata de aventură.",
                "draggables": [
                    {"id": "argument", "label": "Argument"},
                    {"id": "parameter", "label": "Parametru"},
                    {"id": "return", "label": "Cuvânt `return`"},
                ],
                "targets": [
                    {"prompt": "Valoarea reală trimisă când apelăm funcția.", "accepts": "argument"},
                    {"prompt": "Numele folosit în interior pentru a primi valoarea.", "accepts": "parameter"},
                    {"prompt": "Instrucțiunea care trimite rezultatul înapoi.", "accepts": "return"},
                ],
            },
        },
    ]

    for info in lessons_data:
        lesson, created = Lesson.objects.get_or_create(
            title=info["title"],
            defaults={
                "subject": subject,
                "excerpt": info["excerpt"],
                "theory_intro": info["theory_intro"],
                "theory_takeaways": info["theory_takeaways"],
                "content": info["content"],
                "difficulty": info["difficulty"],
                "age_bracket": info["age_bracket"],
                "duration_minutes": info["duration"],
                "date": today + timedelta(days=info["offset"]),
            },
        )

        if not created:
            continue

        for resource in info["resources"]:
            LessonResource.objects.create(
                lesson=lesson,
                title=resource["title"],
                url=resource["url"],
                resource_type=resource["resource_type"],
                order=resource["order"],
            )

        for test_data in info["tests"]:
            Test.objects.create(
                lesson=lesson,
                question=test_data["question"],
                correct_answer=test_data["correct_answer"],
                wrong_answers=test_data["wrong_answers"],
                theory_summary=test_data["theory_summary"],
                practice_prompt=test_data["practice_prompt"],
                explanation=test_data["explanation"],
            )

        LessonPractice.objects.create(
            lesson=lesson,
            intro=info["practice"]["intro"],
            instructions=info["practice"]["instructions"],
            success_message=info["practice"]["success_message"],
            data={
                "draggables": info["practice"]["draggables"],
                "targets": info["practice"]["targets"],
            },
        )


class Migration(migrations.Migration):

    dependencies = [
        ("estudy", "0008_lesson_age_bracket_lesson_theory_intro_and_more"),
    ]

    operations = [
        migrations.RunPython(seed_showcase_lessons, migrations.RunPython.noop),
    ]
